/**
 * Î¨∏Ï†ú RAG ÏóÖÎç∞Ïù¥Ìä∏ ÌéòÏù¥ÏßÄ
 * ÍµêÏàòÍ∞Ä PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÏó¨ RAG ÏßÄÏãù Î≤†Ïù¥Ïä§Î•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† Ïã§ÏãúÍ∞Ñ ÏûêÎèô Îü¨ÎãùÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.
 */
import React, { useState, useCallback, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import { 
  Upload, 
  FileText, 
  Brain, 
  CheckCircle, 
  AlertCircle, 
  Clock,
  ArrowRight,
  Download,
  Eye,
  Database,
  Zap,
  Activity,
  Layers,
  X,
  Trash2,
  Plus,
  RefreshCw
} from 'lucide-react';
import { questionReviewApi } from '../../services/questionReviewService.js';
import apiClient from '../../services/api.js';

// Î¨∏Ï†ú Í≤ÄÌÜ† Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
const QuestionReviewCard = ({ question, onApprove, onReject, onEdit }) => {
  return (
    <div className="border border-gray-200 rounded-lg p-4 bg-gray-50">
      <div className="flex justify-between items-start mb-3">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-sm font-medium text-gray-500">Î¨∏Ï†ú {question.question_number}</span>
            <span className={`px-2 py-1 text-xs rounded-full ${
              question.difficulty === 'ÏÉÅ' ? 'bg-red-100 text-red-800' :
              question.difficulty === 'Ï§ë' ? 'bg-yellow-100 text-yellow-800' :
              'bg-green-100 text-green-800'
            }`}>
              {question.difficulty}
            </span>
            {question.subject && (
              <span className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                {question.subject}
              </span>
            )}
          </div>
          <p className="text-gray-900 mb-2">{question.content}</p>
          {question.description && (
            <p className="text-sm text-gray-600 mb-2">{question.description}</p>
          )}
        </div>
      </div>
      
      <div className="flex gap-2 justify-end">
        <button
          onClick={onEdit}
          className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
        >
          üîß ÏàòÏ†ï
        </button>
        <button
          onClick={onApprove}
          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
        >
          ‚úÖ ÏäπÏù∏
        </button>
        <button
          onClick={onReject}
          className="px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors"
        >
          ‚ùå Í±∞Î∂Ä
        </button>
      </div>
    </div>
  );
};

const RAGUpdate = () => {
  const [uploadStatus, setUploadStatus] = useState('idle'); // 'idle' | 'uploading' | 'success' | 'error'
  const [uploadResults, setUploadResults] = useState([]); // Îã§Ï§ë ÏóÖÎ°úÎìú Í≤∞Í≥º
  const [uploadError, setUploadError] = useState('');
  const [uploadProgress, setUploadProgress] = useState({});
  const [ragStats, setRagStats] = useState(null);
  const [realTimeLearning, setRealTimeLearning] = useState(true);
  const [autoLearningLogs, setAutoLearningLogs] = useState([]);
  const [vectorIndexing, setVectorIndexing] = useState(false);
  const [showVectorExplanation, setShowVectorExplanation] = useState(false);
  const [professorInfo, setProfessorInfo] = useState(null);
  
  // Îã§Ï§ë ÌååÏùº ÏóÖÎ°úÎìú Í¥ÄÎ†® ÏÉÅÌÉú
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [fileMetadata, setFileMetadata] = useState({});
  const [currentUploadIndex, setCurrentUploadIndex] = useState(0);
  const [totalUploadCount, setTotalUploadCount] = useState(0);

  useEffect(() => {
    loadProfessorInfo();
    loadRagStats();
    if (realTimeLearning) {
      startRealTimeLearning();
    }
  }, [realTimeLearning]);

  // ÍµêÏàò Ï†ïÎ≥¥ Î°úÎìú
  const loadProfessorInfo = async () => {
    try {
      const response = await apiClient.get('/auth/me');
      setProfessorInfo(response.data);
    } catch (error) {
      console.error('ÍµêÏàò Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // ÍµêÏàò ÌïôÍ≥ºÎ≥Ñ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉùÏÑ±
  const getDepartmentCategories = () => {
    const department = professorInfo?.department || 'ÏùºÎ∞ò';
    
    const departmentCategories = {
      'Í∞ÑÌò∏ÌïôÍ≥º': [
        { value: 'Íµ≠Í∞ÄÍ≥†Ïãú', label: 'Í∞ÑÌò∏ÏÇ¨ Íµ≠Í∞ÄÍ≥†Ïãú' },
        { value: 'ÏûÑÏÉÅÏã§Ïäµ', label: 'ÏûÑÏÉÅÏã§Ïäµ ÏÇ¨Î°Ä' },
        { value: 'Í∞ÑÌò∏Í≥ºÏ†ï', label: 'Í∞ÑÌò∏Í≥ºÏ†ï ÏûêÎ£å' },
        { value: 'Í∏∞Î≥∏Í∞ÑÌò∏', label: 'Í∏∞Î≥∏Í∞ÑÌò∏Ìïô' },
        { value: 'ÏÑ±Ïù∏Í∞ÑÌò∏', label: 'ÏÑ±Ïù∏Í∞ÑÌò∏Ìïô' },
        { value: 'ÏïÑÎèôÍ∞ÑÌò∏', label: 'ÏïÑÎèôÍ∞ÑÌò∏Ìïô' },
        { value: 'Î™®ÏÑ±Í∞ÑÌò∏', label: 'Î™®ÏÑ±Í∞ÑÌò∏Ìïô' },
        { value: 'Ï†ïÏã†Í∞ÑÌò∏', label: 'Ï†ïÏã†Í±¥Í∞ïÍ∞ÑÌò∏Ìïô' }
      ],
      'Î¨ºÎ¶¨ÏπòÎ£åÌïôÍ≥º': [
        { value: 'Íµ≠Í∞ÄÍ≥†Ïãú', label: 'Î¨ºÎ¶¨ÏπòÎ£åÏÇ¨ Íµ≠Í∞ÄÍ≥†Ïãú' },
        { value: 'Ïû¨ÌôúÏπòÎ£å', label: 'Ïû¨ÌôúÏπòÎ£å ÏÇ¨Î°Ä' },
        { value: 'Ïö¥ÎèôÏπòÎ£å', label: 'Ïö¥ÎèôÏπòÎ£å Îß§Îâ¥Ïñº' },
        { value: 'Î¨ºÎ¶¨ÏπòÎ£åÌïôÍ∞úÎ°†', label: 'Î¨ºÎ¶¨ÏπòÎ£åÌïôÍ∞úÎ°†' },
        { value: 'Ï†ïÌòïÎ¨ºÎ¶¨ÏπòÎ£å', label: 'Ï†ïÌòïÎ¨ºÎ¶¨ÏπòÎ£åÌïô' },
        { value: 'Ïã†Í≤ΩÎ¨ºÎ¶¨ÏπòÎ£å', label: 'Ïã†Í≤ΩÎ¨ºÎ¶¨ÏπòÎ£åÌïô' },
        { value: 'Ïã¨ÌèêÎ¨ºÎ¶¨ÏπòÎ£å', label: 'Ïã¨ÌèêÎ¨ºÎ¶¨ÏπòÎ£åÌïô' },
        { value: 'ÏÜåÏïÑÎ¨ºÎ¶¨ÏπòÎ£å', label: 'ÏÜåÏïÑÎ¨ºÎ¶¨ÏπòÎ£åÌïô' }
      ],
      'ÏûëÏóÖÏπòÎ£åÌïôÍ≥º': [
        { value: 'Íµ≠Í∞ÄÍ≥†Ïãú', label: 'ÏûëÏóÖÏπòÎ£åÏÇ¨ Íµ≠Í∞ÄÍ≥†Ïãú' },
        { value: 'Ïù∏ÏßÄÏû¨Ìôú', label: 'Ïù∏ÏßÄÏû¨Ìôú ÏÇ¨Î°Ä' },
        { value: 'ÏùºÏÉÅÏÉùÌôúÌôúÎèô', label: 'ÏùºÏÉÅÏÉùÌôúÌôúÎèô ÌèâÍ∞Ä' },
        { value: 'ÏûëÏóÖÏπòÎ£åÌïôÍ∞úÎ°†', label: 'ÏûëÏóÖÏπòÎ£åÌïôÍ∞úÎ°†' },
        { value: 'Ïã†Ï≤¥Í∏∞Îä•ÏûëÏóÖÏπòÎ£å', label: 'Ïã†Ï≤¥Í∏∞Îä•ÏûëÏóÖÏπòÎ£åÌïô' },
        { value: 'Ï†ïÏã†ÏÇ¨ÌöåÏûëÏóÖÏπòÎ£å', label: 'Ï†ïÏã†ÏÇ¨ÌöåÏûëÏóÖÏπòÎ£åÌïô' },
        { value: 'ÏÜåÏïÑÏûëÏóÖÏπòÎ£å', label: 'ÏÜåÏïÑÏûëÏóÖÏπòÎ£åÌïô' },
        { value: 'Ïó∞Íµ¨Î∞©Î≤ïÎ°†', label: 'ÏûëÏóÖÏπòÎ£å Ïó∞Íµ¨Î∞©Î≤ïÎ°†' }
      ]
    };

    // Í∏∞Î≥∏ Í≥µÌÜµ Ïπ¥ÌÖåÍ≥†Î¶¨
    const commonCategories = [
      { value: 'ÎÖºÎ¨∏ÏûêÎ£å', label: 'ÎÖºÎ¨∏ ÏûêÎ£å' },
      { value: 'Ïô∏Î∂ÄÏûêÎ£å', label: 'Ïô∏Î∂Ä ÏûêÎ£å' },
      { value: 'ÍµêÏû¨', label: 'ÍµêÏû¨' },
      { value: 'Î™®ÏùòÍ≥†ÏÇ¨', label: 'Î™®ÏùòÍ≥†ÏÇ¨' },
      { value: 'Ï§ëÍ∞ÑÍ≥†ÏÇ¨', label: 'Ï§ëÍ∞ÑÍ≥†ÏÇ¨' },
      { value: 'Í∏∞ÎßêÍ≥†ÏÇ¨', label: 'Í∏∞ÎßêÍ≥†ÏÇ¨' }
    ];

    return [
      ...(departmentCategories[department] || []),
      ...commonCategories
    ];
  };

  // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Ï≤òÎ¶¨
  useEffect(() => {
    const handleKeyPress = (event) => {
      if (event.ctrlKey && event.key === 'h') {
        event.preventDefault();
        setShowVectorExplanation(!showVectorExplanation);
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => {
      document.removeEventListener('keydown', handleKeyPress);
    };
  }, [showVectorExplanation]);

  // RAG ÌÜµÍ≥Ñ Î°úÎìú
  const loadRagStats = async () => {
    try {
      const response = await apiClient.get('/professor/rag/stats');
      setRagStats(response.data);
      console.log('RAG ÌÜµÍ≥Ñ Î°úÎî© ÏôÑÎ£å');
    } catch (error) {
      console.error('RAG ÌÜµÍ≥Ñ Î°úÎìú Ïã§Ìå®:', error);
      setRagStats({
        total_documents: 0,
        total_embeddings: 0,
        embedding_dimensions: 0,
        last_updated: new Date().toISOString(),
        knowledge_areas: [],
        auto_learning_enabled: false,
        indexing_status: 'error'
      });
    }
  };

  // Ïã§ÏãúÍ∞Ñ ÏûêÎèô Îü¨Îãù ÏãúÏûë
  const startRealTimeLearning = () => {
    console.log('üîÑ Ïã§ÏãúÍ∞Ñ RAG ÏûêÎèô Îü¨Îãù ÏãúÏûë');
    
    // ÏûêÎèô ÌïôÏäµ Î°úÍ∑∏ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    const logInterval = setInterval(() => {
      const newLog = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        action: 'ÏûêÎèô Î≤°ÌÑ∞ Ïù∏Îç±Ïã± ÏóÖÎç∞Ïù¥Ìä∏',
        status: 'success',
        documents_processed: Math.floor(Math.random() * 10) + 1,
        embeddings_updated: Math.floor(Math.random() * 100) + 50
      };
      
      setAutoLearningLogs(prev => [newLog, ...prev.slice(0, 9)]); // ÏµúÍ∑º 10Í∞úÎßå Ïú†ÏßÄ
    }, 30000); // 30Ï¥àÎßàÎã§

    return () => clearInterval(logInterval);
  };

  // ÌååÏùº ÎìúÎ°≠ Ìï∏Îì§Îü¨ (Îã§Ï§ë ÌååÏùº ÏßÄÏõê)
  const onDrop = useCallback(async (acceptedFiles) => {
    if (!acceptedFiles || acceptedFiles.length === 0) return;

    // PDF ÌååÏùºÎßå ÌïÑÌÑ∞ÎßÅ
    const pdfFiles = acceptedFiles.filter(file => file.type === 'application/pdf');
    const invalidFiles = acceptedFiles.filter(file => file.type !== 'application/pdf');

    if (invalidFiles.length > 0) {
      alert(`‚ö†Ô∏è PDF ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.\nÏ†úÏô∏Îêú ÌååÏùº: ${invalidFiles.map(f => f.name).join(', ')}`);
    }

    if (pdfFiles.length === 0) {
      setUploadError('PDF ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ÌååÏùº ÌÅ¨Í∏∞ Í≤ÄÏ¶ù (50MB per file)
    const oversizedFiles = pdfFiles.filter(file => file.size > 50 * 1024 * 1024);
    if (oversizedFiles.length > 0) {
      alert(`‚ö†Ô∏è ÌååÏùº ÌÅ¨Í∏∞Îäî 50MB Ïù¥ÌïòÏó¨Ïïº Ìï©ÎãàÎã§.\nÏ¥àÍ≥ºÎêú ÌååÏùº: ${oversizedFiles.map(f => f.name).join(', ')}`);
      const validFiles = pdfFiles.filter(file => file.size <= 50 * 1024 * 1024);
      if (validFiles.length === 0) return;
      setSelectedFiles(validFiles);
    } else {
      setSelectedFiles(pdfFiles);
    }

    // ÌååÏùºÎ≥Ñ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî (ÍµêÏàò ÌïôÍ≥º Í∏∞Î≥∏ Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú)
    const defaultCategory = getDepartmentCategories()[0]?.value || 'Íµ≠Í∞ÄÍ≥†Ïãú';
    const initialMetadata = {};
    pdfFiles.forEach(file => {
      initialMetadata[file.name] = {
        title: file.name.replace('.pdf', ''),
        category: defaultCategory
      };
    });
    setFileMetadata(initialMetadata);

    // ÏóÖÎ°úÎìú ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setUploadResults([]);
    setUploadError('');
    setUploadProgress({});
  }, []);

  // ÌååÏùº Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
  const updateFileMetadata = (fileName, field, value) => {
    setFileMetadata(prev => ({
      ...prev,
      [fileName]: {
        ...prev[fileName],
        [field]: value
      }
    }));
  };

  // ÌååÏùº Ï†úÍ±∞
  const removeFile = (fileName) => {
    setSelectedFiles(prev => prev.filter(file => file.name !== fileName));
    setFileMetadata(prev => {
      const newMetadata = { ...prev };
      delete newMetadata[fileName];
      return newMetadata;
    });
  };

  // Îã§Ï§ë ÌååÏùº ÌÜµÌï© ÏóÖÎ°úÎìú ÏãúÏûë (Î∞©Ïãù 1: Î©ÄÌã∞ÌååÏùº ÌïúÎ≤àÏóê ÏóÖÎ°úÎìú)
  const startMultipleUpload = async () => {
    if (selectedFiles.length === 0) {
      alert('ÏóÖÎ°úÎìúÌï† ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ÍµêÏàò Ï†ïÎ≥¥ ÌôïÏù∏
    if (!professorInfo) {
      alert('ÍµêÏàò Ï†ïÎ≥¥Î•º Î°úÎìúÌïòÎäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setUploadStatus('uploading');
    setUploadError('');
    setUploadResults([]);
    setCurrentUploadIndex(1);
    setTotalUploadCount(1); // ÌÜµÌï© ÏóÖÎ°úÎìúÏù¥ÎØÄÎ°ú 1Í∞ú ÏûëÏóÖ
    setVectorIndexing(true);

    // ÌÜµÌï© Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï (Ï≤´ Î≤àÏß∏ ÌååÏùº Í∏∞Ï§Ä, Ïó¨Îü¨ ÌååÏùº ÌÜµÌï© ÌëúÏãú)
    const firstFile = selectedFiles[0];
    const metadata = fileMetadata[firstFile.name] || { 
      title: `ÌÜµÌï©Î¨∏Ï†ú_${selectedFiles.length}Í∞úÌååÏùº`, 
      category: 'ÏùºÎ∞ò' 
    };
    
    try {
      // Ï†ÑÏ≤¥ ÌååÏùºÏóê ÎåÄÌïú ÏßÑÌñâÎ•† Ï∂îÏ†Å
      const handleUploadProgress = (percentCompleted) => {
        // Ïã§Ï†ú ÏóÖÎ°úÎìúÎäî Ï†ÑÏ≤¥Ïùò 40%ÍπåÏßÄÎßå, ÎÇòÎ®∏ÏßÄ 60%Îäî ÌååÏã± Îã®Í≥Ñ
        const uploadProgress = Math.min(percentCompleted * 0.4, 40);
        selectedFiles.forEach(file => {
          setUploadProgress(prev => ({
            ...prev,
            [file.name]: uploadProgress
          }));
        });
      };

      // ÌååÏã± ÏãúÏûë ÌëúÏãú (40% -> 95%)
      selectedFiles.forEach(file => {
        setUploadProgress(prev => ({
          ...prev,
          [file.name]: 40
        }));
      });

      // ÌååÏã± ÏßÑÌñâÎ•† ÏãúÎÆ¨Î†àÏù¥ÏÖò (Î™®Îì† ÌååÏùºÏóê ÎåÄÌï¥ ÎèôÍ∏∞Ìôî)
      const parsingInterval = setInterval(() => {
        selectedFiles.forEach(file => {
          setUploadProgress(prev => {
            const currentProgress = prev[file.name] || 40;
            if (currentProgress < 95) {
              return {
                ...prev,
                [file.name]: Math.min(currentProgress + Math.random() * 3, 95)
              };
            }
            return prev;
          });
        });
      }, 1500);

      // ÌÜµÌï© Î©ÄÌã∞ÌååÏùº ÏóÖÎ°úÎìú API Ìò∏Ï∂ú
      const result = await questionReviewApi.uploadPdfWithReview(
        selectedFiles,  // ÌååÏùº Î∞∞Ïó¥ Ï†ÑÏ≤¥ Ï†ÑÏÜ°
        handleUploadProgress, 
        metadata.title, 
        metadata.category
      );
      
      // ÌååÏã± ÏôÑÎ£å
      clearInterval(parsingInterval);
      selectedFiles.forEach(file => {
        setUploadProgress(prev => ({
          ...prev,
          [file.name]: 100
        }));
      });
      
      if (result.success) {
        setUploadResults([{
          ...result,
          fileName: `ÌÜµÌï©ÏóÖÎ°úÎìú_${selectedFiles.length}Í∞úÌååÏùº`,
          fileTitle: metadata.title,
          fileCategory: metadata.category,
          status: 'success',
          message: `‚úÖ ${selectedFiles.length}Í∞ú ÌååÏùº ÌÜµÌï© ÏóÖÎ°úÎìú ÏôÑÎ£å (${result.total_questions}Í∞ú Î¨∏Ï†ú ÏÉùÏÑ±)`,
          questionLimitApplied: result.total_questions >= 22,
          uploadedFiles: selectedFiles.map(f => f.name),
          filesProcessed: result.files_processed || selectedFiles.length
        }]);
      } else {
        setUploadResults([{
          fileName: `ÌÜµÌï©ÏóÖÎ°úÎìú_${selectedFiles.length}Í∞úÌååÏùº`,
          fileTitle: metadata.title,
          fileCategory: metadata.category,
          status: 'error',
          message: `‚ùå ÌÜµÌï© ÏóÖÎ°úÎìú Ïã§Ìå®: ${result.message}`,
          error: result.message,
          uploadedFiles: selectedFiles.map(f => f.name)
        }]);
      }
    } catch (error) {
      console.error(`ÌÜµÌï© ÌååÏùº ÏóÖÎ°úÎìú Ïò§Î•ò:`, error);
      
      // ÌååÏã± ÏßÑÌñâÎ•† ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï§ëÎã®
      clearInterval(parsingInterval);
      
      // 500 Ïò§Î•òÏùò Í≤ΩÏö∞ Î∂ÄÎ∂ÑÏ†Å ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨
      if (error.response?.status === 500) {
        setUploadResults([{
          fileName: `ÌÜµÌï©ÏóÖÎ°úÎìú_${selectedFiles.length}Í∞úÌååÏùº`,
          fileTitle: metadata.title,
          fileCategory: metadata.category,
          status: 'partial_success',
          message: `‚ö†Ô∏è ${selectedFiles.length}Í∞ú ÌååÏùº ÌÜµÌï© ÏóÖÎ°úÎìú Î∂ÄÎ∂Ñ ÏôÑÎ£å (ÌååÏã± ÏÑ±Í≥µ, ÏùëÎãµ Ïò§Î•ò)`,
          note: 'Î¨∏Ï†ú Í≤ÄÌÜ† ÌéòÏù¥ÏßÄÏóêÏÑú ÌôïÏù∏ ÌïÑÏöî',
          uploadedFiles: selectedFiles.map(f => f.name)
        }]);
      } else {
        setUploadResults([{
          fileName: `ÌÜµÌï©ÏóÖÎ°úÎìú_${selectedFiles.length}Í∞úÌååÏùº`,
          fileTitle: metadata.title,
          fileCategory: metadata.category,
          status: 'error',
          message: `‚ùå ÌÜµÌï© ÏóÖÎ°úÎìú Ïã§Ìå®`,
          error: error.response?.data?.detail || error.message,
          uploadedFiles: selectedFiles.map(f => f.name)
        }]);
      }
    }

    setUploadStatus('success');
    setVectorIndexing(false);
    
    // Í≤∞Í≥º ÏöîÏïΩ ÏïåÎ¶º
    const successCount = uploadResults.filter(r => r.status === 'success').length;
    const partialCount = uploadResults.filter(r => r.status === 'partial_success').length;
    const errorCount = uploadResults.filter(r => r.status === 'error').length;
    const limitAppliedCount = uploadResults.filter(r => r.questionLimitApplied).length;
    
    setTimeout(() => {
      alert(`üìä ÏóÖÎ°úÎìú ÏôÑÎ£å!\n\n‚úÖ ÏÑ±Í≥µ: ${successCount}Í∞ú\n‚ö†Ô∏è Î∂ÄÎ∂Ñ ÏÑ±Í≥µ: ${partialCount}Í∞ú\n‚ùå Ïã§Ìå®: ${errorCount}Í∞ú\nüìã 22Í∞ú Ï†úÌïú Ï†ÅÏö©: ${limitAppliedCount}Í∞ú ÌååÏùº\n\nÎ¨∏Ï†ú Í≤ÄÌÜ† ÌéòÏù¥ÏßÄÏóêÏÑú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî!`);
    }, 1000);
    
    // RAG ÌÜµÍ≥Ñ ÏÉàÎ°úÍ≥†Ïπ®
    setTimeout(() => {
      loadRagStats();
    }, 2000);
    
    // Î¨∏Ï†ú Í≤ÄÌÜ† ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô Ï†úÏïà
    setTimeout(() => {
      if (successCount > 0 || partialCount > 0) {
        if (confirm('üìã Î¨∏Ï†ú Í≤ÄÌÜ† ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏóÖÎ°úÎìúÎêú Î¨∏Ï†úÎì§ÏùÑ Ï¶âÏãú Í≤ÄÌÜ†ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.')) {
          window.location.href = '/professor/question-review';
        }
      }
    }, 3000);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf']
    },
    multiple: true,
    disabled: uploadStatus === 'uploading'
  });

  const resetUpload = () => {
    setUploadStatus('idle');
    setUploadResults([]);
    setUploadError('');
    setUploadProgress({});
    setSelectedFiles([]);
    setFileMetadata({});
    setCurrentUploadIndex(0);
    setTotalUploadCount(0);
  };

  // Î¨∏Ï†ú Ïï°ÏÖò Ìï∏Îì§Îü¨
  const handleQuestionAction = async (questionId, action) => {
    try {
      if (action === 'approve') {
        const response = await apiClient.post('/professor/questions/approve', {
          question_ids: [questionId],
          action: 'approve'
        });
        if (response.data.success) {
          alert('‚úÖ Î¨∏Ï†úÍ∞Ä ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.');
          // ÏóÖÎ°úÎìú Í≤∞Í≥ºÏóêÏÑú Ìï¥Îãπ Î¨∏Ï†ú Ï†úÍ±∞
          setUploadResults(prev => prev.map(result => ({
            ...result,
            questions_preview: result.questions_preview.filter(q => q.id !== questionId)
          })));
        }
      } else if (action === 'reject') {
        const response = await apiClient.post('/professor/questions/approve', {
          question_ids: [questionId],
          action: 'reject'
        });
        if (response.data.success) {
          alert('‚ùå Î¨∏Ï†úÍ∞Ä Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.');
          // ÏóÖÎ°úÎìú Í≤∞Í≥ºÏóêÏÑú Ìï¥Îãπ Î¨∏Ï†ú Ï†úÍ±∞
          setUploadResults(prev => prev.map(result => ({
            ...result,
            questions_preview: result.questions_preview.filter(q => q.id !== questionId)
          })));
        }
      }
    } catch (error) {
      console.error('Î¨∏Ï†ú Ïï°ÏÖò Ïã§Ìå®:', error);
      
      // ÏóêÎü¨ Î©îÏãúÏßÄ Í∞úÏÑ†
      let errorMessage = 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      
      if (error.response?.data?.detail) {
        if (typeof error.response.data.detail === 'string') {
          errorMessage = error.response.data.detail;
        } else if (Array.isArray(error.response.data.detail)) {
          errorMessage = error.response.data.detail.map(err => err.msg || err.message || JSON.stringify(err)).join(', ');
        } else {
          errorMessage = JSON.stringify(error.response.data.detail);
        }
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      alert(`‚ùå Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:\n\n${errorMessage}\n\nÏÉÅÌÉú ÏΩîÎìú: ${error.response?.status || 'N/A'}`);
    }
  };

  // Î¨∏Ï†ú ÏàòÏ†ï Ìï∏Îì§Îü¨
  const handleQuestionEdit = (questionId) => {
    // Î¨∏Ï†ú Í≤ÄÌÜ† ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    window.location.href = `/professor/question-review?question=${questionId}`;
  };

  // ÏàòÎèô Î≤°ÌÑ∞ Ïù∏Îç±Ïä§ Ïû¨Íµ¨ÏÑ±
  const handleReindexVectors = async () => {
    // ÏÇ¨Ïö©Ïûê ÌôïÏù∏ ÎåÄÌôîÏÉÅÏûê
    const userConfirmed = confirm(`üîß Î≤°ÌÑ∞ Ïû¨Ïù∏Îç±Ïã±ÏùÑ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?

üìã ÏûëÏóÖ ÎÇ¥Ïö©:
‚Ä¢ Î™®Îì† ÏóÖÎ°úÎìúÎêú Î¨∏Ï†úÎ•º AI Î≤°ÌÑ∞Î°ú Ïû¨Î≥ÄÌôò
‚Ä¢ Í≤ÄÏÉâ Ïù∏Îç±Ïä§ ÏµúÏ†ÅÌôî Î∞è Ïû¨Íµ¨ÏÑ±  
‚Ä¢ Î¨∏Ï†ú Í≤ÄÏÉâ ÏÑ±Îä• Ìñ•ÏÉÅ

‚è±Ô∏è ÏòàÏÉÅ ÏÜåÏöî ÏãúÍ∞Ñ: 2-5Î∂Ñ
üìä ÌòÑÏû¨ Î¨∏ÏÑú Ïàò: ${ragStats?.total_documents || 0}Í∞ú

üí° ÎßéÏùÄ Î¨∏Ï†úÍ∞Ä ÏóÖÎ°úÎìúÎêòÏñ¥ ÏûàÍ±∞ÎÇò Í≤ÄÏÉâ ÏÑ±Îä•Ïù¥ Îñ®Ïñ¥Ïßà Îïå Ïã§ÌñâÌïòÏãúÎ©¥ Ï¢ãÏäµÎãàÎã§.`);

    if (!userConfirmed) return;

    try {
      setVectorIndexing(true);
      const response = await apiClient.post('/professor/rag/reindex');
      if (response.data.success) {
        alert(`‚úÖ Î≤°ÌÑ∞ Ïû¨Ïù∏Îç±Ïã± ÏôÑÎ£å!

üéâ ${response.data.message}
üìà AI Î¨∏Ï†ú Í≤ÄÏÉâ ÏÑ±Îä•Ïù¥ Ìñ•ÏÉÅÎêòÏóàÏäµÎãàÎã§.
üîç Ïù¥Ï†ú Îçî Ï†ïÌôïÌïú Î¨∏Ï†ú Ï∂îÏ≤úÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.

üí° ÌåÅ: Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú(Ïõî 1Ìöå) Ïã§ÌñâÌïòÏãúÎ©¥ ÏµúÏ†ÅÏùò ÏÑ±Îä•ÏùÑ Ïú†ÏßÄÌï† Ïàò ÏûàÏäµÎãàÎã§.`);
        loadRagStats();
      } else {
        alert('‚ùå Î≤°ÌÑ∞ Ïù∏Îç±Ïã±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + response.data.message);
      }
    } catch (error) {
      console.error('Î≤°ÌÑ∞ Ïù∏Îç±Ïã± Ïã§Ìå®:', error);
      alert(`‚ùå Î≤°ÌÑ∞ Ïù∏Îç±Ïã± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.

üîç Ïò§Î•ò ÎÇ¥Ïö©: ${error.response?.data?.detail || error.message}

üí° Ìï¥Í≤∞ Î∞©Î≤ï:
‚Ä¢ ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî
‚Ä¢ Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî  
‚Ä¢ Î¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎêòÎ©¥ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî`);
    } finally {
      setVectorIndexing(false);
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
              {/* Ìó§Îçî */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <Database className="h-8 w-8 text-purple-600" />
            <h1 className="text-3xl font-bold text-gray-900">Î¨∏Ï†ú RAG ÏóÖÎç∞Ïù¥Ìä∏</h1>
            <div className="bg-amber-100 text-amber-800 px-3 py-1 rounded-full text-sm font-medium">
              ÏµúÎåÄ 22Í∞ú Î¨∏Ï†ú Ï≤òÎ¶¨
            </div>
          </div>
          <p className="text-gray-600 text-lg mb-3">
            PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÏó¨ RAG ÏßÄÏãù Î≤†Ïù¥Ïä§Î•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† Ïã§ÏãúÍ∞Ñ ÏûêÎèô Îü¨ÎãùÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.
          </p>
          <div className="bg-blue-50 border-l-4 border-blue-400 p-3 rounded">
            <p className="text-blue-800 text-sm">
              <strong>üì¢ ÏãúÏä§ÌÖú Ï†ïÏ±Ö:</strong> question_parser.pyÏóê ÏÑ§Ï†ïÎêú Ï†ïÏ±ÖÏóê Îî∞Îùº ÌååÏùºÎãπ ÏµúÎåÄ 22Í∞ú Î¨∏Ï†ú(1~22Î≤à)ÍπåÏßÄÎßå ÌååÏã±Îê©ÎãàÎã§. 
              Îçî ÎßéÏùÄ Î¨∏Ï†úÍ∞Ä Ìè¨Ìï®Îêú Í≤ΩÏö∞ Î≥ÑÎèÑ ÌååÏùºÎ°ú Î∂ÑÌï†ÌïòÏó¨ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî.
            </p>
          </div>
        </div>

      {/* RAG ÏãúÏä§ÌÖú ÏÉÅÌÉú */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-xl shadow-lg p-6" title={`${professorInfo?.department || 'Ìï¥Îãπ ÌïôÍ≥º'} Í¥ÄÎ†® ÏóÖÎ°úÎìúÎêú PDF ÌååÏùºÏùò Ï¥ù Í∞úÏàò`}>
          <div className="flex items-center justify-between mb-2">
            <Layers className="h-8 w-8 text-blue-600" />
            <span className="text-2xl font-bold text-blue-600">{ragStats?.total_documents || 0}</span>
          </div>
          <h3 className="text-sm font-medium text-gray-600">Ï¥ù Î¨∏ÏÑú Ïàò</h3>
          <p className="text-xs text-gray-500 mt-1">
            {professorInfo?.department || 'Ìï¥Îãπ ÌïôÍ≥º'} Í¥ÄÎ†® ÏûêÎ£å
          </p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6" title="AIÍ∞Ä Î¨∏Ï†úÎ•º Ïù¥Ìï¥ÌïòÍ∏∞ ÏúÑÌï¥ ÏÉùÏÑ±Ìïú Î≤°ÌÑ∞Ïùò Í∞úÏàò">
          <div className="flex items-center justify-between mb-2">
            <Brain className="h-8 w-8 text-green-600" />
            <span className="text-2xl font-bold text-green-600">{ragStats?.total_embeddings?.toLocaleString() || 0}</span>
          </div>
          <h3 className="text-sm font-medium text-gray-600">ÏûÑÎ≤†Îî© Î≤°ÌÑ∞</h3>
          <p className="text-xs text-gray-500 mt-1">AI Ïù¥Ìï¥Î•º ÏúÑÌïú Î≤°ÌÑ∞</p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6" title="Í∞Å Î≤°ÌÑ∞Í∞Ä Í∞ÄÏßÄÎäî ÏàòÌïôÏ†Å Ï∞®ÏõêÏùò Ïàò (ÎÜíÏùÑÏàòÎ°ù Ï†ïÌôïÌï®)">
          <div className="flex items-center justify-between mb-2">
            <Activity className="h-8 w-8 text-purple-600" />
            <span className="text-2xl font-bold text-purple-600">{ragStats?.embedding_dimensions || 0}</span>
          </div>
          <h3 className="text-sm font-medium text-gray-600">Î≤°ÌÑ∞ Ï∞®Ïõê</h3>
          <p className="text-xs text-gray-500 mt-1">Î≤°ÌÑ∞ Ï†ïÎ∞ÄÎèÑ</p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6" title="ÏÉàÎ°úÏö¥ Î¨∏Ï†ú ÏóÖÎ°úÎìú Ïãú ÏûêÎèôÏúºÎ°ú Î≤°ÌÑ∞Î•º ÏÉùÏÑ±ÌïòÎäî Í∏∞Îä•">
          <div className="flex items-center justify-between mb-2">
            <Zap className="h-8 w-8 text-yellow-600" />
            <span className={`text-2xl font-bold ${realTimeLearning ? 'text-green-600' : 'text-gray-400'}`}>
              {realTimeLearning ? 'ON' : 'OFF'}
            </span>
          </div>
          <h3 className="text-sm font-medium text-gray-600">Ïã§ÏãúÍ∞Ñ Îü¨Îãù</h3>
          <p className="text-xs text-gray-500 mt-1">ÏûêÎèô Î≤°ÌÑ∞ ÏÉùÏÑ±</p>
        </div>
      </div>

      {/* Ïã§ÏãúÍ∞Ñ ÏûêÎèô Îü¨Îãù Ï†úÏñ¥ */}
      <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <Zap className="h-5 w-5 text-yellow-600" />
              Ïã§ÏãúÍ∞Ñ ÏûêÎèô Îü¨Îãù Ï†úÏñ¥
            </h2>
            <button
              onClick={() => setShowVectorExplanation(!showVectorExplanation)}
              className="text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded-full hover:bg-blue-200 transition-colors flex items-center gap-1"
              title={showVectorExplanation ? 'ÏÑ§Î™ÖÏùÑ Ïà®ÍπÅÎãàÎã§ (Ctrl+H)' : 'Î≤°ÌÑ∞ Ïû¨Ïù∏Îç±Ïã±Ïóê ÎåÄÌïú ÏûêÏÑ∏Ìïú ÏÑ§Î™ÖÏùÑ Î¥ÖÎãàÎã§ (Ctrl+H)'}
            >
              <Brain className="h-3 w-3" />
              {showVectorExplanation ? (
                <>
                  <span>ÏÑ§Î™Ö Ïà®Í∏∞Í∏∞</span>
                  <span className="text-xs opacity-70">‚ñ≤</span>
                </>
              ) : (
                <>
                  <span>ÏÑ§Î™Ö Î≥¥Í∏∞</span>
                  <span className="text-xs opacity-70">‚ñº</span>
                </>
              )}
            </button>
          </div>
          <div className="flex items-center space-x-4">
            <button
              onClick={handleReindexVectors}
              disabled={vectorIndexing}
              className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50"
            >
              {vectorIndexing ? 'üîÑ Ïù∏Îç±Ïã± Ï§ë...' : 'üîß Î≤°ÌÑ∞ Ïû¨Ïù∏Îç±Ïã±'}
            </button>
            <button
              onClick={() => setRealTimeLearning(!realTimeLearning)}
              className={`relative inline-flex h-8 w-14 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none ${
                realTimeLearning ? 'bg-green-600' : 'bg-gray-200'
              }`}
            >
              <span
                className={`pointer-events-none inline-block h-7 w-7 rounded-full bg-white shadow transform ring-0 transition duration-200 ease-in-out ${
                  realTimeLearning ? 'translate-x-6' : 'translate-x-0'
                }`}
              />
            </button>
          </div>
        </div>
        
        {/* Î≤°ÌÑ∞ Ïû¨Ïù∏Îç±Ïã± ÏÑ§Î™Ö - ÌÜ†Í∏Ä Í∞ÄÎä• */}
        {showVectorExplanation && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4 animate-in slide-in-from-top-2 duration-300">
            <h3 className="text-lg font-semibold text-blue-900 mb-3 flex items-center gap-2">
              <Brain className="h-5 w-5" />
              üîß Î≤°ÌÑ∞ Ïû¨Ïù∏Îç±Ïã±Ïù¥ÎûÄ?
            </h3>
            
            <div className="grid md:grid-cols-2 gap-4 text-sm">
              <div>
                <h4 className="font-semibold text-blue-800 mb-2">üìö Ïâ¨Ïö¥ ÏÑ§Î™Ö</h4>
                <ul className="space-y-1 text-blue-700">
                  <li>‚Ä¢ <strong>ÎèÑÏÑúÍ¥Ä ÏÉâÏù∏ ÏãúÏä§ÌÖú</strong>Í≥º ÎπÑÏä∑Ìï©ÎãàÎã§</li>
                  <li>‚Ä¢ ÏÉàÎ°úÏö¥ Ï±Ö(Î¨∏Ï†ú)Ïù¥ Îì§Ïñ¥Ïò§Î©¥ <strong>Ïπ¥ÌÉàÎ°úÍ∑∏Î•º ÏóÖÎç∞Ïù¥Ìä∏</strong></li>
                  <li>‚Ä¢ AIÍ∞Ä <strong>Î¨∏Ï†úÎ•º Îçî Ïûò Ï∞æÍ≥† Ïù¥Ìï¥</strong>Ìï† Ïàò ÏûàÎèÑÎ°ù Ï†ïÎ¶¨</li>
                  <li>‚Ä¢ Í≤ÄÏÉâ ÏÑ±Îä•Í≥º Ï†ïÌôïÎèÑÍ∞Ä <strong>ÌÅ¨Í≤å Ìñ•ÏÉÅ</strong>Îê©ÎãàÎã§</li>
                </ul>
              </div>
              
              <div>
                <h4 className="font-semibold text-blue-800 mb-2">‚öôÔ∏è Í∏∞Ïà†Ï†Å ÏÑ§Î™Ö</h4>
                <ul className="space-y-1 text-blue-700">
                  <li>‚Ä¢ Î¨∏Ï†úÎì§ÏùÑ AIÍ∞Ä Ïù¥Ìï¥ÌïòÎäî <strong>ÏàòÌïôÏ†Å Î≤°ÌÑ∞</strong>Î°ú Î≥ÄÌôò</li>
                  <li>‚Ä¢ Ïù¥ Î≤°ÌÑ∞Îì§ÏùÑ <strong>Í≤ÄÏÉâ Í∞ÄÎä•Ìïú DB</strong>Ïóê Ï†ÄÏû•</li>
                  <li>‚Ä¢ ÏÉàÎ°úÏö¥ Î¨∏Ï†ú Ï∂îÍ∞Ä Ïãú <strong>Ï†ÑÏ≤¥ Ïù∏Îç±Ïä§ Ïû¨Íµ¨ÏÑ±</strong></li>
                  <li>‚Ä¢ <strong>Ïú†ÏÇ¨Ìïú Î¨∏Ï†úÎì§ÏùÑ Îçî Ï†ïÌôïÌïòÍ≤å</strong> Ï∞æÏùÑ Ïàò ÏûàÏùå</li>
                </ul>
              </div>
            </div>
            
            <div className="mt-4 pt-3 border-t border-blue-200">
              <h4 className="font-semibold text-blue-800 mb-2">üïê Ïñ∏Ï†ú ÏÇ¨Ïö©ÌïòÎÇòÏöî?</h4>
              <div className="grid md:grid-cols-3 gap-3 text-xs text-blue-700">
                <div className="bg-white rounded p-2">
                  <strong>ÏÉà Î¨∏Ï†ú ÎåÄÎüâ ÏóÖÎ°úÎìú ÌõÑ</strong><br/>
                  ÎßéÏùÄ Î¨∏Ï†úÎ•º ÌïúÎ≤àÏóê ÏóÖÎ°úÎìúÌïú Í≤ΩÏö∞
                </div>
                <div className="bg-white rounded p-2">
                  <strong>Í≤ÄÏÉâ ÏÑ±Îä•Ïù¥ Îñ®Ïñ¥Ïßà Îïå</strong><br/>
                  AIÍ∞Ä Í¥ÄÎ†® Î¨∏Ï†úÎ•º Ïûò Î™ªÏ∞æÎäî Í≤ΩÏö∞
                </div>
                <div className="bg-white rounded p-2">
                  <strong>Ï†ïÍ∏∞Ï†ÅÏù∏ ÏµúÏ†ÅÌôî</strong><br/>
                  Ïõî 1Ìöå Ï†ïÎèÑ ÏÑ±Îä• Ìñ•ÏÉÅÏùÑ ÏúÑÌï¥
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* ÏûêÎèô ÌïôÏäµ Î°úÍ∑∏ */}
        <div className="bg-gray-50 rounded-lg p-4">
          <h3 className="text-sm font-medium text-gray-700 mb-3">ÏµúÍ∑º ÏûêÎèô ÌïôÏäµ Î°úÍ∑∏</h3>
          {autoLearningLogs.length === 0 ? (
            <p className="text-sm text-gray-500">ÏûêÎèô ÌïôÏäµ Î°úÍ∑∏Í∞Ä ÏóÜÏäµÎãàÎã§.</p>
          ) : (
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {autoLearningLogs.map((log) => (
                <div key={log.id} className="flex items-center justify-between text-xs">
                  <span className="text-gray-600">
                    {new Date(log.timestamp).toLocaleTimeString()} - {log.action}
                  </span>
                  <span className="text-green-600 font-medium">
                    +{log.embeddings_updated} Î≤°ÌÑ∞
                  </span>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* ÏóÖÎ°úÎìú ÏòÅÏó≠ */}
      <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
        <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
          <Upload className="h-5 w-5 text-blue-600" />
          RAG ÏßÄÏãù Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
        </h2>

        {uploadStatus === 'idle' && (
          <div className="space-y-6">
            {/* ÌååÏùº ÎìúÎ°≠Ï°¥ */}
            <div
              {...getRootProps()}
              className={`
                border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-all
                ${isDragActive 
                  ? 'border-purple-500 bg-purple-50' 
                  : 'border-gray-300 hover:border-purple-400 hover:bg-gray-50'
                }
              `}
            >
              <input {...getInputProps()} />
              <div className="flex items-center justify-center gap-4 mb-4">
                <Upload className="h-12 w-12 text-blue-500" />
                <Plus className="h-8 w-8 text-gray-400" />
                <FileText className="h-12 w-12 text-green-500" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {isDragActive ? 'PDF ÌååÏùºÎì§ÏùÑ Ïó¨Í∏∞Ïóê ÎÜìÏúºÏÑ∏Ïöî!' : 'Ïó¨Îü¨ Í∞úÏùò PDF ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò ÌÅ¥Î¶≠ÌïòÏó¨ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'}
              </h3>
              <p className="text-gray-500 mb-4">
                ‚Ä¢ ÌååÏùºÎãπ ÏµúÎåÄ 50MB ‚Ä¢ PDF ÌòïÏãùÎßå ÏßÄÏõê ‚Ä¢ Ìïú Î≤àÏóê Ïó¨Îü¨ ÌååÏùº ÏóÖÎ°úÎìú Í∞ÄÎä•
              </p>
              
              {/* Î∞©Ïãù 1: ÌÜµÌï© ÏóÖÎ°úÎìú ÏïàÎÇ¥ */}
              <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4 mb-4">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <span className="text-2xl">üöÄ</span>
                  <h4 className="font-semibold text-green-800">Î∞©Ïãù 1: ÌÜµÌï© Î©ÄÌã∞ÏóÖÎ°úÎìú</h4>
                  <span className="bg-green-100 text-green-700 px-2 py-1 rounded-full text-xs font-medium">Ï∂îÏ≤ú</span>
                </div>
                <div className="text-sm text-green-700 space-y-1">
                  <p><strong>‚úÖ ÌïúÎ≤àÏóê ÏóÖÎ°úÎìú:</strong> Î¨∏Ï†úÏßÄÏôÄ Ï†ïÎãµÏßÄÎ•º Ìï®Íªò ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠</p>
                  <p><strong>üîÑ ÏûêÎèô Îß§Ïπ≠:</strong> AIÍ∞Ä Í∞ôÏùÄ Î¨∏Ï†úÎ≤àÌò∏ÎÅºÎ¶¨ ÏûêÎèôÏúºÎ°ú Îß§Ïπ≠</p>
                  <p><strong>‚ö° Îπ†Î•∏ Ï≤òÎ¶¨:</strong> Í∞úÎ≥Ñ ÏóÖÎ°úÎìú ÎåÄÏã† ÌÜµÌï© Ï≤òÎ¶¨Î°ú ÏãúÍ∞Ñ Ï†àÏïΩ</p>
                  <p><strong>üéØ Ï†ïÎãµ Ïö∞ÏÑ†:</strong> Ï†ïÎãµÏßÄ Ï†ïÎ≥¥Í∞Ä Ïö∞ÏÑ† Ï†ÅÏö©ÎêòÏñ¥ Ï†ïÌôïÎèÑ Ìñ•ÏÉÅ</p>
                  <p><strong>üìä ÏµúÎåÄ Ï≤òÎ¶¨:</strong> ÌÜµÌï© ÌååÏùºÏóêÏÑú ÏµúÎåÄ 22Í∞ú Î¨∏Ï†úÍπåÏßÄ Ï∂îÏ∂ú</p>
                </div>
              </div>
              
              {/* Ï∂îÍ∞Ä ÏïàÎÇ¥ÏÇ¨Ìï≠ */}
              <div className="mt-4 text-xs text-gray-500 bg-gray-50 rounded p-3">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  <div>
                    <p><strong>‚úÖ ÏßÄÏõê ÌòïÏãù:</strong> PDFÎßå Í∞ÄÎä•</p>
                    <p><strong>üìè ÌååÏùº ÌÅ¨Í∏∞:</strong> ÏµúÎåÄ 50MB per file</p>
                  </div>
                  <div>
                    <p><strong>üî¢ Î¨∏Ï†ú Ï†úÌïú:</strong> ÌååÏùºÎãπ 22Í∞ú</p>
                    <p><strong>‚ö° Ï≤òÎ¶¨ ÏãúÍ∞Ñ:</strong> ÌååÏùºÎãπ 2-5Î∂Ñ</p>
                  </div>
                </div>
              </div>
            </div>

            {/* ÏÑ†ÌÉùÎêú ÌååÏùº Î™©Î°ù */}
            {selectedFiles.length > 0 && (
              <div className="mt-6">
                <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                  <FileText className="h-5 w-5 text-blue-600" />
                  ÏÑ†ÌÉùÎêú ÌååÏùº ({selectedFiles.length}Í∞ú)
                </h3>
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  {selectedFiles.map((file, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <FileText className="h-4 w-4 text-blue-600" />
                            <span className="font-medium text-gray-900">{file.name}</span>
                            <span className="text-sm text-gray-500">
                              ({(file.size / 1024 / 1024).toFixed(1)} MB)
                            </span>
                          </div>
                          
                          {/* ÏßÑÌñâÎ•† ÌëúÏãú */}
                          {uploadProgress[file.name] !== undefined && (
                            <div className="mb-3">
                              <div className="flex items-center justify-between mb-1">
                                <span className="text-sm text-gray-600">ÏóÖÎ°úÎìú ÏßÑÌñâÎ•†</span>
                                <span className="text-sm font-medium text-blue-600">
                                  {uploadProgress[file.name]}%
                                </span>
                              </div>
                              <div className="w-full bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                  style={{ width: `${uploadProgress[file.name]}%` }}
                                />
                              </div>
                            </div>
                          )}
                        </div>
                        
                        {uploadStatus !== 'uploading' && (
                          <button
                            onClick={() => removeFile(file.name)}
                            className="p-1 text-red-600 hover:bg-red-100 rounded"
                            title="ÌååÏùº Ï†úÍ±∞"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        )}
                      </div>
                      
                      {/* ÌååÏùº Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏûÖÎ†• */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            ÌååÏùº Ï†úÎ™©
                          </label>
                          <input
                            type="text"
                            value={fileMetadata[file.name]?.title || ''}
                            onChange={(e) => updateFileMetadata(file.name, 'title', e.target.value)}
                            disabled={uploadStatus === 'uploading'}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
                            placeholder="ÌååÏùº Ï†úÎ™© (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Ïπ¥ÌÖåÍ≥†Î¶¨
                          </label>
                          <select
                            value={fileMetadata[file.name]?.category || 'Íµ≠Í∞ÄÍ≥†Ïãú'}
                            onChange={(e) => updateFileMetadata(file.name, 'category', e.target.value)}
                            disabled={uploadStatus === 'uploading'}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
                          >
                            {getDepartmentCategories().map(category => (
                              <option key={category.value} value={category.value}>
                                {category.label}
                              </option>
                            ))}
                          </select>
                          <p className="text-xs text-blue-600 mt-1">
                            üìö {professorInfo?.department || 'ÏùºÎ∞ò'} Ï†ÑÏö© Ïπ¥ÌÖåÍ≥†Î¶¨
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* ÏùºÍ¥Ñ ÏóÖÎ°úÎìú Î≤ÑÌäº */}
                <div className="mt-6 flex gap-3">
                  <button
                    onClick={startMultipleUpload}
                    disabled={uploadStatus === 'uploading' || selectedFiles.length === 0}
                    className="flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2"
                  >
                    <Upload className="h-5 w-5" />
                    {uploadStatus === 'uploading' 
                      ? `üöÄ ÌÜµÌï© ÏóÖÎ°úÎìú Ï§ë... (Îß§Ïπ≠ ÏßÑÌñâ)`
                      : `üöÄ ${selectedFiles.length}Í∞ú ÌååÏùº ÌÜµÌï© ÏóÖÎ°úÎìú (Î∞©Ïãù 1)`
                    }
                  </button>
                  <button
                    onClick={resetUpload}
                    disabled={uploadStatus === 'uploading'}
                    className="bg-gray-500 text-white px-4 py-3 rounded-lg hover:bg-gray-600 disabled:bg-gray-400 transition-colors flex items-center gap-2"
                  >
                    <Trash2 className="h-4 w-4" />
                    Ï¥àÍ∏∞Ìôî
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {uploadStatus === 'uploading' && (
          <div className="text-center py-8">
            <div className="flex items-center justify-center gap-3 mb-4">
              <Clock className="h-6 w-6 text-purple-600 animate-spin" />
              <span className="text-lg font-medium">
                üöÄ ÌÜµÌï© Î©ÄÌã∞ÏóÖÎ°úÎìú ÏßÑÌñâ Ï§ë... (Î∞©Ïãù 1)
              </span>
              <span className="bg-green-100 text-green-700 px-2 py-1 rounded-full text-xs font-medium">
                ÏûêÎèô Îß§Ïπ≠ Ï§ë
              </span>
            </div>
            
            {/* Ï†ÑÏ≤¥ ÏßÑÌñâÎ•† */}
            <div className="mb-6">
              <div className="w-full max-w-md mx-auto bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-purple-600 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${(currentUploadIndex / totalUploadCount) * 100}%` }}
                />
              </div>
              <p className="text-sm text-gray-500 mt-2">
                Ï†ÑÏ≤¥ ÏßÑÌñâÎ•†: {Math.round((currentUploadIndex / totalUploadCount) * 100)}%
              </p>
            </div>

            {/* ÌòÑÏû¨ Ï≤òÎ¶¨ Ï§ëÏù∏ ÌååÏùºÎì§ ÌëúÏãú */}
            <div className="max-w-2xl mx-auto">
              <h4 className="text-md font-medium mb-3">ÌååÏùºÎ≥Ñ ÏóÖÎ°úÎìú ÌòÑÌô©</h4>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {selectedFiles.map((file, index) => {
                  const progress = uploadProgress[file.name];
                  const isCompleted = progress === 100;
                  const isProcessing = progress !== undefined && progress < 100;
                  const isPending = progress === undefined;
                  
                  return (
                    <div key={index} className={`flex items-center justify-between p-3 rounded-lg ${
                      isCompleted ? 'bg-green-50 border border-green-200' :
                      isProcessing ? 'bg-blue-50 border border-blue-200' :
                      'bg-gray-50 border border-gray-200'
                    }`}>
                      <div className="flex items-center gap-2">
                        <FileText className={`h-4 w-4 ${
                          isCompleted ? 'text-green-600' :
                          isProcessing ? 'text-blue-600' :
                          'text-gray-400'
                        }`} />
                        <span className={`text-sm font-medium ${
                          isCompleted ? 'text-green-800' :
                          isProcessing ? 'text-blue-800' :
                          'text-gray-600'
                        }`}>
                          {file.name}
                        </span>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {isCompleted && (
                          <>
                            <CheckCircle className="h-4 w-4 text-green-600" />
                            <span className="text-xs text-green-700 font-medium">ÏôÑÎ£å</span>
                          </>
                        )}
                                                 {isProcessing && (
                           <>
                             <div className="w-16 bg-gray-200 rounded-full h-2">
                               <div 
                                 className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                 style={{ width: `${progress}%` }}
                               />
                             </div>
                             <span className="text-xs text-blue-700 font-medium">
                               {progress < 30 ? 'ÏóÖÎ°úÎìú' : progress < 95 ? 'ÌååÏã±' : 'ÏôÑÎ£å'} {Math.round(progress)}%
                             </span>
                           </>
                         )}
                        {isPending && (
                          <span className="text-xs text-gray-500">ÎåÄÍ∏∞ Ï§ë</span>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            
            {/* ÏïàÎÇ¥ Î©îÏãúÏßÄ */}
            <div className="mt-6 p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg max-w-md mx-auto border border-green-200">
              <p className="text-xs text-green-700">
                üöÄ <strong>Î∞©Ïãù 1: ÌÜµÌï© Î©ÄÌã∞ÏóÖÎ°úÎìú ÏßÑÌñâ Ï§ë</strong><br/>
                ‚úÖ Î¨∏Ï†úÏßÄÏôÄ Ï†ïÎãµÏßÄÎ•º ÏûêÎèôÏúºÎ°ú Îß§Ïπ≠Ìï©ÎãàÎã§<br/>
                üîÑ Í∞ôÏùÄ Î¨∏Ï†úÎ≤àÌò∏ÎÅºÎ¶¨ ÌÜµÌï© Ï≤òÎ¶¨Îê©ÎãàÎã§<br/>
                ‚ö° ÌïúÎ≤àÏóê Î™®Îì† ÌååÏùºÏùÑ Ï≤òÎ¶¨ÌïòÏó¨ ÏãúÍ∞ÑÏùÑ Ï†àÏïΩÌï©ÎãàÎã§<br/>
                üìä ÌÜµÌï© ÌååÏùºÏóêÏÑú ÏµúÎåÄ 22Í∞ú Î¨∏Ï†úÍπåÏßÄ Ï∂îÏ∂úÎê©ÎãàÎã§
              </p>
            </div>
          </div>
        )}

        {uploadStatus === 'error' && (
          <div className="text-center py-8">
            <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-red-900 mb-2">
              {uploadError.includes('ÌÉÄÏûÑÏïÑÏõÉ') ? 'Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ï¥àÍ≥º' : 'RAG ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®'}
            </h3>
            <div className="text-red-600 mb-6 whitespace-pre-line text-sm max-w-md mx-auto">
              {uploadError}
            </div>
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <button
                onClick={resetUpload}
                className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-colors"
              >
                Îã§Ïãú ÏãúÎèÑ
              </button>
              {uploadError.includes('ÌÉÄÏûÑÏïÑÏõÉ') && (
                <button
                  onClick={() => window.location.href = '/professor/question-review'}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
                >
                  <Eye className="h-4 w-4" />
                  Î¨∏Ï†ú Í≤ÄÌÜ† ÌéòÏù¥ÏßÄ ÌôïÏù∏
                </button>
              )}
            </div>
          </div>
        )}

        {uploadStatus === 'success' && uploadResults.length > 0 && (
          <div className="py-8">
            <div className="text-center mb-8">
              <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-green-900 mb-2">üöÄ ÌÜµÌï© Î©ÄÌã∞ÏóÖÎ°úÎìú ÏôÑÎ£å! (Î∞©Ïãù 1)</h3>
              <p className="text-sm text-green-700">Î¨∏Ï†úÏßÄÏôÄ Ï†ïÎãµÏßÄÍ∞Ä ÏûêÎèôÏúºÎ°ú Îß§Ïπ≠ÎêòÏñ¥ Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§</p>
              
              {/* ÏóÖÎ°úÎìú Í≤∞Í≥º ÏöîÏïΩ */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium text-green-900">ÏÑ±Í≥µ</h4>
                  <p className="text-2xl font-bold text-green-600">
                    {uploadResults.filter(r => r.status === 'success').length}Í∞ú
                  </p>
                </div>
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <h4 className="font-medium text-yellow-900">Î∂ÄÎ∂Ñ ÏÑ±Í≥µ</h4>
                  <p className="text-2xl font-bold text-yellow-600">
                    {uploadResults.filter(r => r.status === 'partial_success').length}Í∞ú
                  </p>
                </div>
                <div className="bg-red-50 p-4 rounded-lg">
                  <h4 className="font-medium text-red-900">Ïã§Ìå®</h4>
                  <p className="text-2xl font-bold text-red-600">
                    {uploadResults.filter(r => r.status === 'error').length}Í∞ú
                  </p>
                </div>
                <div className="bg-amber-50 p-4 rounded-lg">
                  <h4 className="font-medium text-amber-900">22Í∞ú Ï†úÌïú Ï†ÅÏö©</h4>
                  <p className="text-2xl font-bold text-amber-600">
                    {uploadResults.filter(r => r.questionLimitApplied).length}Í∞ú
                  </p>
                </div>
              </div>
            </div>

            {/* ÏóÖÎ°úÎìú Í≤∞Í≥º ÏÉÅÏÑ∏ */}
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-green-600" />
                ÏóÖÎ°úÎìú Í≤∞Í≥º ÏÉÅÏÑ∏
              </h3>
              
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {uploadResults.map((result, index) => (
                  <div 
                    key={index} 
                    className={`p-4 rounded-lg border ${
                      result.status === 'success' ? 'bg-green-50 border-green-200' :
                      result.status === 'partial_success' ? 'bg-yellow-50 border-yellow-200' :
                      'bg-red-50 border-red-200'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <p className={`font-medium ${
                          result.status === 'success' ? 'text-green-800' :
                          result.status === 'partial_success' ? 'text-yellow-800' :
                          'text-red-800'
                        }`}>
                          {result.message}
                        </p>
                        {result.note && (
                          <p className="text-sm text-gray-600 mt-1">{result.note}</p>
                        )}
                        {result.error && (
                          <p className="text-sm text-red-600 mt-1">Ïò§Î•ò: {result.error}</p>
                        )}
                        {result.questionLimitApplied && (
                          <p className="text-xs text-amber-700 mt-1 bg-amber-100 rounded px-2 py-1 inline-block">
                            ‚ö†Ô∏è 22Í∞ú Î¨∏Ï†ú Ï†úÌïú Ï†ÅÏö©Îê®
                          </p>
                        )}
                      </div>
                      {result.status === 'success' && (
                        <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0 ml-2" />
                      )}
                      {result.status === 'partial_success' && (
                        <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 ml-2" />
                      )}
                      {result.status === 'error' && (
                        <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 ml-2" />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* 22Í∞ú Ï†úÌïú ÏïàÎÇ¥ (Îã§Ï§ë ÌååÏùºÏö©) */}
            {uploadResults.some(r => r.questionLimitApplied) && (
              <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-6">
                <div className="flex items-start gap-3">
                  <span className="text-xl">‚ö†Ô∏è</span>
                  <div>
                    <h4 className="font-semibold text-amber-800 mb-2">Î¨∏Ï†ú Í∞úÏàò Ï†úÌïú Ï†ïÏ±Ö Ï†ÅÏö©Îê®</h4>
                    <div className="text-sm text-amber-700 space-y-1">
                      <p>‚Ä¢ ÏùºÎ∂Ä ÌååÏùºÏóêÏÑú 22Í∞ú Î¨∏Ï†ú Ï†úÌïúÏù¥ Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.</p>
                      <p>‚Ä¢ Í∞Å ÌååÏùºÎßàÎã§ 1~22Î≤à Î¨∏Ï†úÍπåÏßÄÎßå ÌååÏã±ÎêòÏóàÏäµÎãàÎã§.</p>
                      <p>‚Ä¢ ÎÇòÎ®∏ÏßÄ Î¨∏Ï†úÎ•º Ï≤òÎ¶¨ÌïòÎ†§Î©¥ Î≥ÑÎèÑ ÌååÏùºÎ°ú Î∂ÑÌï†ÌïòÏó¨ Îã§Ïãú ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî.</p>
                      <p>‚Ä¢ Ï†úÌïúÏù¥ Ï†ÅÏö©Îêú ÌååÏùº: <strong>{uploadResults.filter(r => r.questionLimitApplied).length}Í∞ú</strong></p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <button
                onClick={() => window.location.href = '/professor/problems'}
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
              >
                <Brain className="h-4 w-4" />
                RAG Î¨∏Ï†ú ÏÉùÏÑ±ÌïòÍ∏∞
                <ArrowRight className="h-4 w-4" />
              </button>
              <button
                onClick={() => window.location.href = '/professor/question-review'}
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
              >
                <Eye className="h-4 w-4" />
                Î¨∏Ï†ú Í≤ÄÌÜ†ÌïòÍ∏∞
              </button>
              <button
                onClick={resetUpload}
                className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors"
              >
                Ï∂îÍ∞Ä ÏóÖÎ°úÎìú
              </button>
            </div>
          </div>
        )}
      </div>

      {/* RAG ÏßÄÏãù ÏòÅÏó≠ */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <Layers className="h-5 w-5 text-blue-600" />
          ÏßÄÏãù Î≤†Ïù¥Ïä§ ÏòÅÏó≠
          {professorInfo && (
            <span className="text-sm font-normal text-blue-600 bg-blue-50 px-2 py-1 rounded-full">
              {professorInfo.department} Ï†ÑÏö©
            </span>
          )}
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {ragStats?.knowledge_areas?.map((area, index) => (
            <div key={index} className="border rounded-lg p-4 hover:bg-gray-50">
              <h3 className="font-medium text-gray-900 mb-2">{area.name || area}</h3>
              <div className="text-sm text-gray-600">
                <p>Î¨∏ÏÑú: {area.document_count || 0}Í∞ú</p>
                <p>Î≤°ÌÑ∞: {area.vector_count || 0}Í∞ú</p>
                <p>ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏: {area.last_updated || 'ÎØ∏ÌôïÏù∏'}</p>
              </div>
            </div>
          )) || (
            <div className="col-span-3 text-center text-gray-500 py-8">
              ÏßÄÏãù Î≤†Ïù¥Ïä§ ÏòÅÏó≠ÏùÑ Î°úÎî© Ï§ëÏûÖÎãàÎã§...
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default RAGUpdate;
